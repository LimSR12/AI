# -*- coding: utf-8 -*-
"""clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nvw05j16uIum3sGNYJRSnqLHMb88Jnsf

# 학습 데이터 다운로드
"""

import sklearn
import numpy as np
print(sklearn.__version__)
print(np.__version__)

!wget https://bit.ly/fruits_300_data -O fruits_300.npy

"""# 소스코드


"""

# 시각화 함수
def draw_fruits(arr, ratio = 1):
  n = len(arr)
  rows = int(np.ceil(n / 10))
  cols = n if rows < 2 else 10
  fig, axs = plt.subplots(rows, cols, figsize = (cols * ratio, rows * ratio), squeeze = False)

  for i in range(rows):
    for j in range(cols):
      if i * 10 + j < n:
        axs[i, j].imshow(arr[i * 10 + j], cmap = 'gray_r')
      axs[i, j].axis('off')
  plt.show()

import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# 데이터 로드 및 reshape
fruits = np.load('fruits_300.npy')
fruits_2d = fruits.reshape(-1, 100 * 100)

"""> 기존 모델"""

# KMeans 클러스터링
km_org = KMeans(n_clusters=3, random_state=42)
km_org.fit(fruits_2d)

# 클러스터 라벨 출력
print(np.unique(km_org.labels_, return_counts=True))

# 클러스터별 이미지 출력
for label in range(3):
    print(f"Cluster {label} 결과:")
    draw_fruits(fruits[km_org.labels_ == label])

"""> 개선 모델"""

from sklearn.preprocessing import StandardScaler

# Z-score 표준화
scaler = StandardScaler()
fruits_scaled = scaler.fit_transform(fruits_2d)

# KMeans 클러스터링
km = KMeans(n_clusters=3, n_init=100, random_state=42)
km.fit(fruits_scaled)

# 클러스터 라벨 출력
print(np.unique(km.labels_, return_counts=True))

# 클러스터별 이미지 출력
for label in range(3):
    print(f"Cluster {label} 결과:")
    draw_fruits(fruits[km.labels_ == label])

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# PCA를 이용해 2D로 차원 축소
pca_2d = PCA(n_components=2)
fruits_2d_pca = pca_2d.fit_transform(fruits_2d)
fruits_scaled_pca = pca_2d.fit_transform(fruits_scaled)

# 기존 모델 시각화
plt.figure(figsize=(8, 6))
plt.title("KMeans")
plt.scatter(fruits_2d_pca[:, 0], fruits_2d_pca[:, 1], c=km.labels_, cmap='viridis', s=40)
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.grid(True)
plt.show()

# 개선 모델 시각화
plt.figure(figsize=(8, 6))
plt.title("KMeans Z-score")
plt.scatter(fruits_scaled_pca[:, 0], fruits_scaled_pca[:, 1], c=km.labels_, cmap='viridis', s=40)
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.grid(True)
plt.show()

# 결과 집계
import numpy as np
import matplotlib.pyplot as plt

# 기존 결과
labels_org, counts_org = np.unique(km_org.labels_, return_counts=True)

# Z-score 정규화 후 결과
labels_scaled, counts_scaled = np.unique(km.labels_, return_counts=True)


# 막대그래프 비교 시각화
bar_width = 0.25
x = np.arange(3)

plt.figure(figsize=(8, 5))
plt.bar(x - bar_width/2, counts_org, width=bar_width, label='Original', color='skyblue')
plt.bar(x + bar_width/2, counts_scaled, width=bar_width, label='Z-score Scaled', color='coral')

plt.title('Cluster Distribution Comparison')
plt.xlabel('Cluster Label')
plt.ylabel('Number of Images')
plt.xticks(x, [f'Cluster {i}' for i in x])
plt.legend()
plt.grid(True, axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""## 최적의 K 찾기"""

# 최적의 k 찾기
inertia = []
for k in range(2,7):
  km = KMeans(n_clusters = k, random_state = 42)
  km.fit(fruits_2d)
  inertia.append(km.inertia_)

plt.plot(range(2,7), inertia)
plt.xlabel('K')
plt.ylabel('inertia')
plt.show()